# Define the layout for the plot
par(mfrow = c(ceil(ncol(data_subset)/2), 2))  # Create a grid layout with 2 columns
# Loop through each column in Data_subset and plot boxplots
for (col in colnames(data_subset)) {
boxplot(Data_subset[[col]], main = paste("Boxplot of", col))
}
# Reset the layout to default
par(mfrow = c(1, 1))
boxplot(data_subset[[col]], main = paste("Boxplot of", col))
# Loop through each column in Data_subset and plot boxplots
for (col in colnames(data_subset)) {
boxplot(data_subset[[col]], main = paste("Boxplot of", col))
}
# Reset the layout to default
par(mfrow = c(1, 1))
#Boxplots
# Define the layout for the plot
par(mfrow = c(ceil(ncol(data_subset)/2), 2))  # Create a grid layout with 2 columns
#Boxplots
# Define the layout for the plot
par(mfrow = c(ceiling(ncol(data_subset)/2), 2))  # Create a grid layout with 2 columns
# Loop through each column in Data_subset and plot boxplots
for (col in colnames(data_subset)) {
boxplot(data_subset[[col]], main = paste("Boxplot of", col))
}
# Reset the layout to default
par(mfrow = c(1, 1))
boxplot(Data_subset[[col]], main = paste("Boxplot of", col))
boxplot(data_subset[[col]], main = paste("Boxplot of", col))
#Boxplots
# Loop through each column in Data_subset and plot a boxplot for each
for (col in colnames(data_subset)) {
boxplot(data_subset[[col]], main = paste("Boxplot of", col))
}
#Modelling
#removing status_published from df
# Remove the column "status_published" from the dataframe
df <- df[, !names(df) %in% c("status_published")]
# Perform K-means clustering
set.seed(7894)  # for reproducibility
kmeans_cluster <- kmeans(df, centers = 3)  # specify the number of clusters
any_na <- anyNA(df)
any_na
library(cowplot)
library(ggcorrplot)
library(ggplot2)
clear
clr
library(cowplot)
library(ggcorrplot)
library(ggplot2)
#Load the dataset
setwd("C:/Users/soham/Downloads/facebook+live+sellers+in+thailand/")
df <- read.csv("Live_20210128.csv", row.names= NULL)
#data view
head(df)
tail(df)
str(df)
summary(df)
#Summary Statistics for numerical features
summary(df$num_reactions)
summary(df$num_comments)
summary(df$num_shares)
# Histogram of num_reactions
plot1 <- ggplot(df, aes(x = num_reactions)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Reactions")
# Histogram of num_comments
plot2 <- ggplot(df, aes(x = num_comments)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Comments")
# Histogram of num_shares
plot3 <- ggplot(df, aes(x = num_shares)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Shares")
# Histogram of num_likes
plot4 <- ggplot(df, aes(x = num_likes)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Likes")
# Histogram of num_loves
plot5 <- ggplot(df, aes(x = num_loves)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Loves")
# Histogram of num_wows
plot6 <- ggplot(df, aes(x = num_wows)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Wows")
# Histogram of num_hahas
plot7 <- ggplot(df, aes(x = num_hahas)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Hahas")
# Histogram of num_sads
plot8 <- ggplot(df, aes(x = num_sads)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Sads")
# Histogram of num_angrys
plot9 <- ggplot(df, aes(x = num_angrys)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Angrys")
# Arrange plots in a grid
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, ncol = 3)
#Grouped bar plot for comparison between status_type
# Melt the data frame to long format
data_long <- reshape2::melt(df, id.vars = "status_type")
# Create a grouped bar plot
ggplot(data_long, aes(x = variable, y = value, fill = status_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Features for Photo and Video Types",
x = "Feature",
y = "Value") +
facet_wrap(~ variable, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Scatter plot of num_likes vs. num_shares
ggplot(df, aes(x = num_likes, y = num_shares)) +
geom_point() +
labs(title = "Scatter Plot of Number of Likes vs. Number of Shares")
# Scatter plot of num_likes vs. num_
ggplot(df, aes(x = num_likes, y = num_reactions)) +
geom_point() +
labs(title = "Scatter Plot of Number of Likes vs. Number of Reactions")
# Remove the 'status_published' column
data_subset <- subset(df, select = -c(status_published, status_type))
#scatterplot matrix
pairs(data_subset)
correlation_matrix <- cor(data_subset)  # Exclude non-numeric columns (like status_published)
# Plot correlation matrix
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
#Outliers
#outlier detection
# First, compute z-scores for each numeric column
z_scores <- scale(data_subset)
# Define a threshold for considering values as outliers (e.g., z-score > 3 or < -3)
threshold <- 3
# Find outliers for each numeric column
outliers <- apply(z_scores, 2, function(x) length(which(abs(x) > threshold)))
# Total count of outliers
total_outliers <- sum(outliers)
# Print count of outliers for each column
print(outliers)
# Print total count of outliers
print(total_outliers)
#Boxplots
# Loop through each column in Data_subset and plot a boxplot for each
for (col in colnames(data_subset)) {
boxplot(data_subset[[col]], main = paste("Boxplot of", col))
}
# Perform K-means clustering
set.seed(7894)  # for reproducibility
kmeans_cluster <- kmeans(df, centers = 3)  # specify the number of clusters
# Perform K-medoids clustering
kmedoids_cluster <- pam(df, k = 3)  # specify the number of clusters
# Print the cluster results
print(kmeans_cluster)
print(kmedoids_cluster)
#Modelling
#removing status_published from df
df_trim <- subset(df, select=-c(status_published))
# Perform K-means clustering
set.seed(7894)  # for reproducibility
kmeans_cluster <- kmeans(df, centers = 3)  # specify the number of clusters
library(stats)
# Perform K-means clustering
set.seed(7894)  # for reproducibility
kmeans_cluster <- kmeans(df_trin, centers = 3)  # specify the number of clusters
# Perform K-medoids clustering
kmedoids_cluster <- pam(df_trim, k = 3)  # specify the number of clusters
# Print the cluster results
print(kmeans_cluster)
print(kmedoids_cluster)
kmeans_cluster <- kmeans(df_trim, centers = 3)  # specify the number of clusters
is.infinte(df_trim)
library(cluster)
#Modelling
#removing status_published from df
df_trim <- subset(df, select=-c(status_published))
# Perform K-means clustering
set.seed(7894)  # for reproducibility
kmeans_cluster <- kmeans(df_trim, centers = 3)  # specify the number of clusters
# Check for missing values in the entire dataframe
any_na <- anyNA(df)
print(any_na)
# Check for missing values in specific columns
# For example, if you want to check for missing values in the "num_reactions" column:
any_na_num_reactions <- anyNA(df$num_reactions)
print(any_na_num_reactions)
df_trim
#Modelling
#removing status_published from df
df_trim <- subset(df, select=-c(status_published))
# Perform K-means clustering
set.seed(7894)  # for reproducibility
kmeans_cluster <- kmeans(df_trim, centers = 3)  # specify the number of clusters
df_trim
df$status_type <- factor(df$status_type, levels = c("link", "photo", "status", "video"), labels = c(1, 2, 3, 4))
# Histogram of num_reactions
plot1 <- ggplot(df, aes(x = num_reactions)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Reactions")
# Histogram of num_comments
plot2 <- ggplot(df, aes(x = num_comments)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Comments")
# Histogram of num_shares
plot3 <- ggplot(df, aes(x = num_shares)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Shares")
# Histogram of num_likes
plot4 <- ggplot(df, aes(x = num_likes)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Likes")
# Histogram of num_loves
plot5 <- ggplot(df, aes(x = num_loves)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Loves")
# Histogram of num_wows
plot6 <- ggplot(df, aes(x = num_wows)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Wows")
# Histogram of num_hahas
plot7 <- ggplot(df, aes(x = num_hahas)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Hahas")
# Histogram of num_sads
plot8 <- ggplot(df, aes(x = num_sads)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Sads")
# Histogram of num_angrys
plot9 <- ggplot(df, aes(x = num_angrys)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Angrys")
#Grouped bar plot for comparison between status_type
# Melt the data frame to long format
data_long <- reshape2::melt(df, id.vars = "status_type")
# Create a grouped bar plot
ggplot(data_long, aes(x = variable, y = value, fill = status_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Features for Photo and Video Types",
x = "Feature",
y = "Value") +
facet_wrap(~ variable, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Check for missing values in the entire dataframe
any_na <- anyNA(df)
print(any_na)
# Check for missing values in specific columns
# For example, if you want to check for missing values in the "num_reactions" column:
any_na_num_reactions <- anyNA(df$num_reactions)
print(any_na_num_reactions)
#Modelling
#removing status_published from df
df_trim <- subset(df, select=-c(status_published))
# Perform K-means clustering
set.seed(7894)  # for reproducibility
kmeans_cluster <- kmeans(df_trim, centers = 3)  # specify the number of clusters
# Perform K-medoids clustering
kmedoids_cluster <- pam(df_trim, k = 3)  # specify the number of clusters
# Print the cluster results
print(kmeans_cluster)
print(kmedoids_cluster)
#Plotting K-means
df_clustered <- cbind(df, cluster = as.factor(kmeans_result$cluster))
#Plotting K-means
df_clustered <- cbind(df, cluster = as.factor(kmeans_cluster$cluster))
df_clustered
ggplot(df_clustered, aes(x = feature1, y = feature2, color = cluster)) +
geom_point() +
labs(title = "k-means Clustering")
#Modelling
#removing status_published from df
df_trim <- subset(df, select=-c(status_published, status_type))
# Perform K-means clustering
set.seed(7894)  # for reproducibility
kmeans_cluster <- kmeans(df_trim, centers = 3)  # specify the number of clusters
# Perform K-medoids clustering
kmedoids_cluster <- pam(df_trim, k = 3)  # specify the number of clusters
# Print the cluster results
print(kmeans_cluster)
print(kmedoids_cluster)
#Plotting K-means
df_clustered <- cbind(df_trim, cluster = as.factor(kmeans_cluster$cluster))
ggplot(df_clustered, aes(x = feature1, y = feature2, color = cluster)) +
geom_point() +
labs(title = "k-means Clustering")
ggplot(df_clustered, aes(x = num_reactions, y = num_shares, color = cluster)) +
geom_point() +
labs(title = "k-means Clustering")
#Plotting K-means
#df_clustered <- cbind(df_trim, cluster = as.factor(kmeans_cluster$cluster))
#ggplot(df_clustered, aes(x = num_reactions, y = num_shares, color = cluster)) +
#  geom_point() +
#  labs(title = "k-means Clustering")
ggpairs(df_clustered, aes(color = cluster))
install.packages("GGally")
library(GGally)
#Plotting K-means
#df_clustered <- cbind(df_trim, cluster = as.factor(kmeans_cluster$cluster))
#ggplot(df_clustered, aes(x = num_reactions, y = num_shares, color = cluster)) +
#  geom_point() +
#  labs(title = "k-means Clustering")
ggpairs(df_clustered, aes(color = cluster))
correlation_matrix <- cor(data_subset)  # Exclude non-numeric columns (like status_published)
# Plot correlation matrix
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
install.packages("factoextra")
library(factoExtra)
library(factoexra)
library(factoextra)
View(data_subset)
library(cowplot)
library(ggcorrplot)
library(ggplot2)
library(stats)
library(cluster)
library(GGally)
library(kableExtra)
library(factoextra)
#Load the dataset
setwd("C:/Users/soham/Downloads/facebook+live+sellers+in+thailand/")
df <- read.csv("Live_20210128.csv", row.names= NULL)
#data view
head(df)
tail(df)
str(df)
summary(df)
#Summary Statistics for numerical features
summary(df$num_reactions)
summary(df$num_comments)
summary(df$num_shares)
df$status_type <- factor(df$status_type, levels = c("link", "photo", "status", "video"), labels = c(1, 2, 3, 4))
# Histogram of num_reactions
plot1 <- ggplot(df, aes(x = num_reactions)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Reactions")
# Histogram of num_comments
plot2 <- ggplot(df, aes(x = num_comments)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Comments")
# Histogram of num_shares
plot3 <- ggplot(df, aes(x = num_shares)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Shares")
# Histogram of num_likes
plot4 <- ggplot(df, aes(x = num_likes)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Likes")
# Histogram of num_loves
plot5 <- ggplot(df, aes(x = num_loves)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Loves")
# Histogram of num_wows
plot6 <- ggplot(df, aes(x = num_wows)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Wows")
# Histogram of num_hahas
plot7 <- ggplot(df, aes(x = num_hahas)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Hahas")
# Histogram of num_sads
plot8 <- ggplot(df, aes(x = num_sads)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Sads")
# Histogram of num_angrys
plot9 <- ggplot(df, aes(x = num_angrys)) +
geom_histogram(binwidth = 20, fill = "skyblue", color = "black") +
labs(title = "Distribution of Number of Angrys")
# Arrange plots in a grid
plot_grid(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, plot9, ncol = 3)
#Grouped bar plot for comparison between status_type
# Melt the data frame to long format
data_long <- reshape2::melt(df, id.vars = "status_type")
# Create a grouped bar plot
ggplot(data_long, aes(x = variable, y = value, fill = status_type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Features for Photo and Video Types",
x = "Feature",
y = "Value") +
facet_wrap(~ variable, scales = "free_y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#scatterplot matrix
pairs(data_subset)
#Drop status_published, status_type
data_subset <- select(df, -c("status_published","status_type"))
library(tidyverse)
#Drop status_published, status_type
data_subset <- select(df, -c("status_published","status_type"))
#scatterplot matrix
pairs(data_subset)
correlation_matrix <- cor(select(df, -c("status_type","status_published")))
# Plot correlation matrix
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
#Scaling the Data
data_subset_scaled <- scale(data_subset)
#Modelling
#Kmeans
#Acquiirng the the optimal number of clusters for the model
fviz_nbclust(data_subset_scaled, kmeans, method="wss") +
geom_line(xintercept = 3, linetype = 2)
#Modelling
#Kmeans
#Acquiirng the the optimal number of clusters for the model
fviz_nbclust(data_subset_scaled, kmeans, method="wss") +
geom_vline(xintercept = 3, linetype = 2)
#Modelling
#Kmeans
#Acquiirng the the optimal number of clusters for the model
fviz_nbclust(data_subset_scaled, kmeans, method="wss") +
geom_vline(xintercept = 7, linetype = 2)
#Kmeans model
set.seed(7894)
kmeans_model <- kmeans(data_subset_scaled, nstart=20, centers=7)
print(model.kmeans)
print(model_kmeans)
print(kmeans_model)
#considering nu_likes and num_reactions as a datset due to high correlation
new_df <- select(data_subset, c("num_reactions", "num_likes"))
#Scaling the Data
data_subset_scaled <- scale(new_df)
#Modelling
#Kmeans
#Acquiirng the the optimal number of clusters for the model using scree plot
fviz_nbclust(data_subset_scaled, kmeans, method="wss") +
geom_vline(xintercept = 7, linetype = 2)
#Kmeans model
set.seed(7894)
kmeans_model <- kmeans(data_subset_scaled, nstart=20, centers=7)
print(kmeans_model)
#considering nu_likes and num_reactions as a datset due to high correlation
new_df <- select(data_subset, c("num_reactions", "num_likes", "num_shares",
"num_comments", "num_loves"))
#Scaling the Data
data_subset_scaled <- scale(new_df)
#Modelling
#Kmeans
#Acquiirng the the optimal number of clusters for the model using scree plot
fviz_nbclust(data_subset_scaled, kmeans, method="wss") +
geom_vline(xinter linetype = 2)
#Modelling
#Kmeans
#Acquiirng the the optimal number of clusters for the model using scree plot
fviz_nbclust(data_subset_scaled, kmeans, method="wss") +
geom_vline(xintercept = 4, linetype = 2)
kmeans_model <- kmeans(data_subset_scaled, nstart=20, centers=4)
print(kmeans_model)
ggpairs(kmeans_model, aes(color = cluster))
data_subset$cluster <- kmeans_model$cluster
pairs(data_subset_scaled[, -ncol(data_subset_scaled)],
col = kmeans_model$cluster,
pch = 16,
main = "Scatterplot Matrix with Clusters")
legend("topright", legend = unique(kmeans_model$cluster),
col = unique(kmeans_model$cluster),
pch = 16,
title = "Cluster")
legend("bottomright", legend = unique(kmeans_model$cluster),
col = unique(kmeans_model$cluster),
pch = 16,
title = "Cluster")
pairs(data_subset_scaled[, -ncol(data_subset_scaled)],
col = kmeans_model$cluster,
pch = 16,
main = "Scatterplot Matrix with Clusters")
#Aggregating the clusters
kable(aggregate(data_subset_scaled, by=list(cluster=kmeans_model$cluster), mean),
format = "latex",
booktabs = TRUE) %>% kable_styling(position="center")
#cluster visualization
fviz_cluster(kmeans_model, data_subset_scaled)
#Kmedioids
fviz_nbclust(data_subset_scaled, kmeans, method="wss") +
geom_vline(xintercept = 4, linetype = 2)
#Kmedioids
fviz_nbclust(data_subset_scaled, pam, method="wss") +
geom_vline(xintercept = 4, linetype = 2)
#Kmedioids
fviz_nbclust(data_subset_scaled, pam, method="wss") +
geom_vline(xintercept = 5, linetype = 2)
#Kmedioids model
set.seed(7894)
kmed_model <- pam(data_subset_scaled, k=5)
print(kmed_model)
airs(data_subset_scaled[, -ncol(data_subset_scaled)],
col = kmed_model$cluster,
pch = 16,
main = "Scatterplot Matrix with Clusters")
pairs(data_subset_scaled[, -ncol(data_subset_scaled)],
col = kmed_model$cluster,
pch = 16,
main = "Scatterplot Matrix with Clusters")
#cluster plot
fviz_cluster(kmed_model, data_subset_scaled)
# Calculate silhouette scores
silhouette_scores <- silhouette(kmeans_model$cluster, dist(data_subset_scaled))
# Mean silhouette score
mean_silhouette_score <- mean(silhouette_scores[, "sil_width"])
print(silhouette_scores)
# Mean silhouette score
mean_silhouette_score <- mean(silhouette_scores[, "sil_width"])
print(mean_silhouette_score)
#silhouette socres
sh_scores <- silhouette(kmed_model$cluster, dis(data_subset_scaled))
#silhouette socres
sh_scores <- silhouette(kmed_model$cluster, dist(data_subset_scaled))
print(sh_scores)
#Mean silhouette scores
mean_sh_score <- mean(sh_scores[, "sil_width"])
print(mean_sh_score)
